# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Messages

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OrderMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrderMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrderMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OrderMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OrderMessage
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # OrderMessage
    def Contents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Messages.OrderContents import OrderContents
            obj = OrderContents()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def OrderMessageStart(builder):
    builder.StartObject(2)

def Start(builder):
    OrderMessageStart(builder)

def OrderMessageAddType(builder, type):
    builder.PrependInt8Slot(0, type, 0)

def AddType(builder, type):
    OrderMessageAddType(builder, type)

def OrderMessageAddContents(builder, contents):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(contents), 0)

def AddContents(builder, contents):
    OrderMessageAddContents(builder, contents)

def OrderMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrderMessageEnd(builder)
