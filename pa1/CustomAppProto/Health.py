# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Health(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Health()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHealth(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Health
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Health
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Health
    def Contents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from CustomAppProto.HealthContents import HealthContents
            obj = HealthContents()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def HealthStart(builder):
    builder.StartObject(2)

def Start(builder):
    HealthStart(builder)

def HealthAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    HealthAddType(builder, type)

def HealthAddContents(builder, contents):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(contents), 0)

def AddContents(builder, contents):
    HealthAddContents(builder, contents)

def HealthEnd(builder):
    return builder.EndObject()

def End(builder):
    return HealthEnd(builder)
